[gd_scene load_steps=3 format=3 uid="uid://ca51xwa6dwfkm"]

[sub_resource type="CSharpScript" id="CSharpScript_oekt4"]
script/source = "using Godot;
using Scripts.Constants;
using System;
using System.Collections.Generic;

public partial class PauseMenu : Control
{
	private Button _openMenu;
	private MarginContainer _marginContainer;

	#region Main controls
	private BoxContainer _mainButtons;
	private Button _settings;
	private Button _quit;
	#endregion / Main controls

	#region Option controls
	private BoxContainer _optionButtons;
	private OptionButton _resolutionSelector;
	private Button _done;
	#endregion / Option controls

	private List<Vector2I> _availableResolutions;

	public override void _Ready()
	{
		_openMenu = GetNode<Button>(\"OpenMenu\");
		_openMenu.Connect(Signals.Pressed, Callable.From(OnOpenMenuPressed));

		_marginContainer = GetNode<MarginContainer>(\"MarginContainer\");

		_mainButtons = GetNode<BoxContainer>(\"./MarginContainer/MainButtons\");
		_optionButtons = GetNode<BoxContainer>(\"./MarginContainer/OptionButtons\");

		_settings = _mainButtons.GetNode<Button>(\"Settings\");
		_settings.Connect(Signals.Pressed, Callable.From(OnSettingsPressed));
		_quit = _mainButtons.GetNode<Button>(\"Quit\");
		_quit.Connect(Signals.Pressed, Callable.From(OnQuitPressed));

		_resolutionSelector = _optionButtons.GetNode<OptionButton>(\"ResolutionContainer/ResolutionSelector\");
		_resolutionSelector.Connect(Signals.ItemSelected, Callable.From<int>(OnResolutionSelected));
		_done = _optionButtons.GetNode<Button>(\"Done\");
		_done.Connect(Signals.Pressed, Callable.From(OnDonePressed));

		FillResolutions();
	}

	private void FillResolutions()
	{
		if (_resolutionSelector == null)
			throw new InvalidOperationException(\"No resolution selector found.\");

		_availableResolutions = [];

		var baseSize = new Vector2I(640, 360);
		var portSize = new Vector2I(640, 360);
		var screenSize = DisplayServer.ScreenGetSize(DisplayServer.WindowGetCurrentScreen());
		while (portSize < screenSize)
		{
			_availableResolutions.Add(portSize);
			_resolutionSelector.AddItem($\"{portSize.X}x{portSize.Y}\");
			portSize += baseSize;
		}
		_availableResolutions.Add(portSize);
		_resolutionSelector.AddItem($\"{portSize.X}x{portSize.Y} (Fullscreen)\");

		// Set resolution to option before fullscreen
		OnResolutionSelected(_availableResolutions.Count - 2);
		// TODO: Change this to reflect the players settings if they are available.
	}

	public void OnOpenMenuPressed()
	{
		_marginContainer.Visible = !_marginContainer.Visible;
		OnDonePressed();
	}

	public void OnSettingsPressed()
	{
		_mainButtons.Hide();
		_optionButtons.Show();
	}

	public void OnQuitPressed()
	{
		// TODO: Save game first.
		GetTree().Quit();
	}

	public void OnDonePressed()
	{
		_optionButtons.Hide();
		_mainButtons.Show();
	}

	public void OnResolutionSelected(int index)
	{
		var window = GetTree().Root;

		// Set fullscreen
		if (index == _availableResolutions.Count - 1)
		{
			window.Mode = Window.ModeEnum.ExclusiveFullscreen;
		}
		// Set window size
		else
		{
			window.Mode = Window.ModeEnum.Windowed;
			window.Size = _availableResolutions[index];
			window.MoveToCenter();
		}

		_resolutionSelector.Selected = index;
	}
}
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_mf1af"]

[node name="PauseMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = SubResource("CSharpScript_oekt4")

[node name="MarginContainer" type="MarginContainer" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 160
theme_override_constants/margin_top = 60
theme_override_constants/margin_right = 160
theme_override_constants/margin_bottom = 40

[node name="MainButtons" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="Settings" type="Button" parent="MarginContainer/MainButtons"]
layout_mode = 2
text = "Settings"

[node name="Quit" type="Button" parent="MarginContainer/MainButtons"]
layout_mode = 2
text = "Save and Quit"

[node name="OptionButtons" type="VBoxContainer" parent="MarginContainer"]
visible = false
layout_mode = 2
theme_override_constants/separation = 10

[node name="ResolutionContainer" type="HBoxContainer" parent="MarginContainer/OptionButtons"]
layout_mode = 2
theme_override_constants/separation = 5

[node name="Label" type="Label" parent="MarginContainer/OptionButtons/ResolutionContainer"]
layout_mode = 2
text = "Resolution:"

[node name="ResolutionSelector" type="OptionButton" parent="MarginContainer/OptionButtons/ResolutionContainer"]
layout_mode = 2
size_flags_horizontal = 3
alignment = 1

[node name="Done" type="Button" parent="MarginContainer/OptionButtons"]
layout_mode = 2
size_flags_horizontal = 4
text = "Done"

[node name="OpenMenu" type="Button" parent="."]
layout_mode = 1
anchors_preset = -1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -24.0
offset_bottom = 24.0
grow_horizontal = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_mf1af")
flat = true
